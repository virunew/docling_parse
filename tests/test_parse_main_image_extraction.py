#!/usr/bin/env python3
"""
Integration test for image extraction in parse_main.py

This test verifies that base64-encoded images are properly extracted and 
replaced with references in the output generated by parse_main.py.
"""

import unittest
import os
import sys
import json
import shutil
import tempfile
from pathlib import Path
import base64
from unittest.mock import patch, MagicMock

# Set up path to import parse_main
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


class TestParseMainImageExtraction(unittest.TestCase):
    """Integration test for image extraction in parse_main.py."""

    def setUp(self):
        """Set up test environment."""
        # Create temporary directory for test files
        self.temp_dir = tempfile.mkdtemp()
        self.output_dir = os.path.join(self.temp_dir, "output")
        
        # Create a temporary PDF file
        self.test_pdf_path = os.path.join(self.temp_dir, "test.pdf")
        with open(self.test_pdf_path, "wb") as f:
            f.write(b"%PDF-1.7\n1 0 obj\n<< /Type /Catalog /Pages 2 0 R >>\nendobj\ntrailer\n<< /Root 1 0 R >>\n%%EOF")
        
        # Create sample document data with base64 image
        self.sample_image_data = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAhKmMIQAAAABJRU5ErkJggg=="
        self.sample_data = {
            "pictures": [
                {
                    "data": f"data:image/png;base64,{self.sample_image_data}",
                    "width": 100,
                    "height": 100,
                }
            ],
            "element_map": {
                "pictures_0": {
                    "self_ref": "#/pictures/0",
                    "extracted_metadata": {
                        "metadata": {}
                    }
                }
            },
            "source_metadata": {
                "filename": "test.pdf"
            }
        }
        
        # Save the original sys.argv
        self.original_argv = sys.argv.copy()
    
    def tearDown(self):
        """Clean up after test."""
        # Restore original sys.argv
        sys.argv = self.original_argv
        
        # Remove temp directory
        shutil.rmtree(self.temp_dir)
    
    @patch('parse_helper.process_pdf_document')
    def test_image_extraction_in_main_workflow(self, mock_process_pdf):
        """Test that base64 images are extracted and replaced in the main workflow."""
        # Set up the mock to return a fake docling document
        mock_process_pdf.return_value = self.sample_data
        
        # Override sys.argv with test arguments
        sys.argv = [
            "parse_main.py",
            "--pdf_path", self.test_pdf_path,
            "--output_dir", self.output_dir,
            "--log_level", "ERROR"
        ]
        
        # Import and run the main function
        from parse_main import main
        result = main()
        
        # Check if execution was successful
        self.assertEqual(result, 0, "The main function should return 0 for success")
        
        # Check if the fixed_document.json was created
        fixed_json_path = os.path.join(self.output_dir, "fixed_document.json")
        self.assertTrue(os.path.exists(fixed_json_path), "Fixed document JSON file should exist")
        
        # Load the fixed document data
        with open(fixed_json_path, 'r', encoding='utf-8') as f:
            fixed_data = json.load(f)
        
        # Check if images directory was created
        images_dir = os.path.join(self.output_dir, "images")
        self.assertTrue(os.path.exists(images_dir), "Images directory should exist")
        
        # Check if an image file was created
        image_files = list(Path(images_dir).glob("*.*"))
        self.assertTrue(len(image_files) > 0, "Image files should be created")
        
        # Verify that base64 data was removed from pictures
        for picture in fixed_data.get("pictures", []):
            self.assertNotIn("data", picture, "Image data should not be inline in pictures")
            self.assertIn("external_file", picture, "Pictures should have external_file references")
        
        # Check if element_map has been updated with external file references
        self.assertIn("external_file", fixed_data["element_map"]["pictures_0"], 
                     "Element map should have external_file reference for images")
        
        # Check the formatted output (if JSON)
        formatted_json_path = os.path.join(self.output_dir, "document.json")
        if os.path.exists(formatted_json_path):
            with open(formatted_json_path, 'r', encoding='utf-8') as f:
                formatted_data = json.load(f)
            
            # Check if any content items contain base64 data
            if "content" in formatted_data:
                for item in formatted_data["content"]:
                    if item.get("type") == "image":
                        self.assertNotIn("data:image/base64", item.get("url", ""),
                                        "Formatted JSON should not contain base64 image data")
        
        # Check the formatted output (if Markdown)
        markdown_path = os.path.join(self.output_dir, "document.md")
        if os.path.exists(markdown_path):
            with open(markdown_path, 'r', encoding='utf-8') as f:
                markdown_content = f.read()
            
            self.assertNotIn("data:image/base64", markdown_content,
                            "Markdown should not contain base64 image data")
        
        # Check the formatted output (if HTML)
        html_path = os.path.join(self.output_dir, "document.html")
        if os.path.exists(html_path):
            with open(html_path, 'r', encoding='utf-8') as f:
                html_content = f.read()
            
            self.assertNotIn("data:image/base64", html_content,
                            "HTML should not contain base64 image data")


if __name__ == "__main__":
    unittest.main() 